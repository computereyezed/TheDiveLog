@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<div class="modal @ModalClass" tabindex="-1" role="dialog" aria-labelledby="CertModal" aria-hidden="true" style="display:@ModalDisplay">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@buttontext Certification</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="() => CertCancel()" aria-label="Cancel">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@certinfo">
                    <DataAnnotationsValidator />
                    @{
                        certinfo.UserID = new Guid(AppState.UserId);
                    }
                    <div class="row">
                        <div class="col-6 col-sm-6 col-md-6 col-lg-4">
                            <span class="field-label">Instructors No.</span>
                            <br />
                            <input type="text" title="Instructors No." class="form-control form-control-lg " @bind="@certinfo.InstrNo" />
                            <ValidationMessage For="@(() => certinfo.InstrNo)" />
                        </div>
                        <div class="col-6 col-sm-6 col-md-6 col-lg-4">
                            <span class="field-label">Instructors Name</span>
                            <br />
                            <input type="text" title="Instructors Name" class="form-control form-control-lg" @bind="@certinfo.InstrName" />
                            <ValidationMessage For="@(() => certinfo.InstrName)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 col-sm-12 col-md-12 col-lg-6">
                            <span class="field-label">Location</span>
                            <br />
                            <input type="text" title="Location" class="form-control form-control-lg" @bind="@certinfo.Location" />
                            <ValidationMessage For="@(() => certinfo.Location)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6 col-sm-6 col-md-6 col-lg-4">
                            <span class="field-label">Phone No.</span>
                            <br />
                            <input type="text" title="Phone No." class="form-control form-control-lg " @bind="@certinfo.Phone" />
                            <ValidationMessage For="@(() => certinfo.Phone)" />
                        </div>
                        <div class="col-6 col-sm-6 col-md-6 col-lg-4">
                            <span class="field-label">Cert Date</span>
                            <br />
                            <input type="date" title="Cert Date" class="form-control form-control-lg" @bind="@certinfo.CertDate" />
                            <ValidationMessage For="@(() => certinfo.CertDate)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6 col-sm-6 col-md-6 col-lg-4">
                            <span class="field-label">Certification</span>
                            <br />
                            <input type="text" title="Certification" class="form-control form-control-lg " @bind="@certinfo.CertificationID" />
                            <ValidationMessage For="@(() => certinfo.CertificationID)" />
                        </div>
                        <div class="col-6 col-sm-6 col-md-6 col-lg-4">
                            <span class="field-label">Country</span>
                            <br />
                            <input type="text" title="Country" class="form-control form-control-lg" @bind="@certinfo.CountryCode" />
                            <ValidationMessage For="@(() => certinfo.CountryCode)" />
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                @*<button type="submit" class="btn btn-success">@buttontext</button>*@

                <button type="submit" class="btn btn-primary" @onclick="() => SaveCert()">@buttontext</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CertCancel()">Cancel</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool Act { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<bool> ButtonClicked { get; set; }

    string buttontext = string.Empty;
    Certifications certinfo { get; set; } = new Certifications();

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public async void CertOpen(long certId, bool act)
    {
        Act = act;

        if (Act)
        {
            buttontext = "Update";
            certinfo = await http.GetFromJsonAsync<Certifications>($"api/cert/byCertId?certid={certId}");
        }
        else
        {
            buttontext = "Add";
            certinfo = new Certifications();
        }

        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    protected async Task SaveCert()
    {
        if (Act)
        {
            await http.PutAsJsonAsync("api/cert", certinfo);
            await js.InvokeVoidAsync("alert", $"Updated Successfully!");
        }
        else
        {
            await http.PostAsJsonAsync("api/cert", certinfo);
            await js.InvokeVoidAsync("alert", $"Added Successfully!");
        }

        await ButtonClicked.InvokeAsync(true);

        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    protected async Task CertCancel()
    {
        await ButtonClicked.InvokeAsync(false);

        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}