@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager uriHelper

<h4>@pv.NumuberofPics pictures in library</h4>

@if (Pic_result != null)
{
    foreach (var item in Pic_result)
    {
        var tt = $"Located in: {item.Located}{Environment.NewLine}Latitude: {item.Latitude}{ Environment.NewLine}Longitude: {item.Longitude}";

        <div class="col-6 col-sm-6 col-md-4 col-lg-3 col-xl-3 text-center">
            <a href="/Pictures/FullPicture/@item.PicturesId">
                <img onfocus="@ImageConvertToString(item.Image, item.Type)" class="image-size" src="@ImgSrc" />
            </a>
            <br />
            <label class="text-blue" title="@tt" data-placement="auto">@item.Location</label>
        </div>
    }
}

@code {
    string ImgSrc = string.Empty;
    PictureView pv { get; set; }
    List<PictureView.Picture> Pic_result { get; set; }

    protected override async Task OnInitializedAsync()
    {
        pv = await client.GetFromJsonAsync<PictureView>($"api/picture/?pgsize=10&page=1");

        Pic_result = pv.ListPics;
    }

    private string ImageConvertToString(byte[] image, string type)
    {
        var img = Convert.ToBase64String(image.ToArray());
        ImgSrc = string.Format($"data:image/{type};base64,{img}");
        return ImgSrc;
    }
}
